{"ast":null,"code":"import axios from 'axios';\n// import http from '../http-common';\nimport http from '../service/http-common';\nconst authenticateUser = (userName, pwd) => {\n  //make api call for auth\n  console.log('auth call', userName, pwd);\n  return http.post(`http://localhost:8080/api/signin`, {\n    email: userName,\n    password: pwd\n  });\n};\nconst storeUserDetails = (userName, jwt) => {\n  sessionStorage.setItem('jwt_token', jwt);\n  // console.log('add user');\n  sessionStorage.setItem('user_dtls', userName);\n  //since user has logged in : now for every request to the backend : add req auth interceptor\n  // setupRequestInterceptor(jwt);\n  //user has logged in successfully : so add it's details under session storage\n  // sessionStorage.setItem('user_dtls', userName);\n  // sessionStorage.setItem('user_key', jwt);\n};\n\nconst removeUserDetails = () => {\n  console.log('rem user');\n  sessionStorage.removeItem('user_dtls');\n  // sessionStorage.removeItem('user_key');\n};\n\nconst isUserLoggedIn = () => {\n  console.log('chk user');\n  return sessionStorage.getItem('user_dtls') === null ? false : true;\n};\nconst getUserName = () => {\n  return sessionStorage.getItem('user_dtls');\n};\n\n//set up axios request interceptor for JWT\nconst setupRequestInterceptor = jwt => {\n  //  const basicAuth = 'Basic ' + window.btoa(userName + ':' + password);\n  axios.interceptors.request.use(config => {\n    if (isUserLoggedIn()) {\n      //adding the authorization header to config\n      config.headers.authorization = 'Bearer ' + jwt;\n    }\n    //return config\n    return config;\n  });\n};\nexport default {\n  authenticateUser,\n  getUserName,\n  isUserLoggedIn,\n  removeUserDetails,\n  storeUserDetails\n};","map":{"version":3,"names":["axios","http","authenticateUser","userName","pwd","console","log","post","email","password","storeUserDetails","jwt","sessionStorage","setItem","removeUserDetails","removeItem","isUserLoggedIn","getItem","getUserName","setupRequestInterceptor","interceptors","request","use","config","headers","authorization"],"sources":["E:/Final project/Airline system-frontend - Copy/src/service/AuthenticationService.js"],"sourcesContent":["import axios from 'axios';\r\n// import http from '../http-common';\r\nimport http from '../service/http-common'\r\n\r\n\r\n\r\n\r\n    const authenticateUser = (userName, pwd) => {\r\n      //make api call for auth\r\n      console.log('auth call', userName, pwd);\r\n      return http.post(`http://localhost:8080/api/signin` , {\r\n        email: userName,\r\n        password: pwd,\r\n      });\r\n    }\r\n    const storeUserDetails = (userName, jwt) => {\r\n      sessionStorage.setItem('jwt_token', jwt);\r\n      // console.log('add user');\r\n      sessionStorage.setItem('user_dtls', userName);\r\n      //since user has logged in : now for every request to the backend : add req auth interceptor\r\n      // setupRequestInterceptor(jwt);\r\n      //user has logged in successfully : so add it's details under session storage\r\n      // sessionStorage.setItem('user_dtls', userName);\r\n      // sessionStorage.setItem('user_key', jwt);\r\n    }\r\n    const removeUserDetails = () => {\r\n      console.log('rem user');\r\n      sessionStorage.removeItem('user_dtls');\r\n      // sessionStorage.removeItem('user_key');\r\n    }\r\n    const isUserLoggedIn = () => {\r\n      console.log('chk user');\r\n      return sessionStorage.getItem('user_dtls') === null ? false : true;\r\n    }\r\n    const getUserName = () => {\r\n      return sessionStorage.getItem('user_dtls');\r\n    }\r\n  \r\n    //set up axios request interceptor for JWT\r\n    const setupRequestInterceptor = (jwt) => {\r\n      //  const basicAuth = 'Basic ' + window.btoa(userName + ':' + password);\r\n      axios.interceptors.request.use((config) => {\r\n        if (isUserLoggedIn()) {\r\n          //adding the authorization header to config\r\n          config.headers.authorization = 'Bearer ' + jwt;\r\n        }\r\n        //return config\r\n        return config;\r\n      });\r\n    }\r\n\r\n\r\nexport default {authenticateUser,getUserName,isUserLoggedIn,removeUserDetails,storeUserDetails};\r\n\r\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB;AACA,OAAOC,IAAI,MAAM,wBAAwB;AAKrC,MAAMC,gBAAgB,GAAGA,CAACC,QAAQ,EAAEC,GAAG,KAAK;EAC1C;EACAC,OAAO,CAACC,GAAG,CAAC,WAAW,EAAEH,QAAQ,EAAEC,GAAG,CAAC;EACvC,OAAOH,IAAI,CAACM,IAAI,CAAE,kCAAiC,EAAG;IACpDC,KAAK,EAAEL,QAAQ;IACfM,QAAQ,EAAEL;EACZ,CAAC,CAAC;AACJ,CAAC;AACD,MAAMM,gBAAgB,GAAGA,CAACP,QAAQ,EAAEQ,GAAG,KAAK;EAC1CC,cAAc,CAACC,OAAO,CAAC,WAAW,EAAEF,GAAG,CAAC;EACxC;EACAC,cAAc,CAACC,OAAO,CAAC,WAAW,EAAEV,QAAQ,CAAC;EAC7C;EACA;EACA;EACA;EACA;AACF,CAAC;;AACD,MAAMW,iBAAiB,GAAGA,CAAA,KAAM;EAC9BT,OAAO,CAACC,GAAG,CAAC,UAAU,CAAC;EACvBM,cAAc,CAACG,UAAU,CAAC,WAAW,CAAC;EACtC;AACF,CAAC;;AACD,MAAMC,cAAc,GAAGA,CAAA,KAAM;EAC3BX,OAAO,CAACC,GAAG,CAAC,UAAU,CAAC;EACvB,OAAOM,cAAc,CAACK,OAAO,CAAC,WAAW,CAAC,KAAK,IAAI,GAAG,KAAK,GAAG,IAAI;AACpE,CAAC;AACD,MAAMC,WAAW,GAAGA,CAAA,KAAM;EACxB,OAAON,cAAc,CAACK,OAAO,CAAC,WAAW,CAAC;AAC5C,CAAC;;AAED;AACA,MAAME,uBAAuB,GAAIR,GAAG,IAAK;EACvC;EACAX,KAAK,CAACoB,YAAY,CAACC,OAAO,CAACC,GAAG,CAAEC,MAAM,IAAK;IACzC,IAAIP,cAAc,CAAC,CAAC,EAAE;MACpB;MACAO,MAAM,CAACC,OAAO,CAACC,aAAa,GAAG,SAAS,GAAGd,GAAG;IAChD;IACA;IACA,OAAOY,MAAM;EACf,CAAC,CAAC;AACJ,CAAC;AAGL,eAAe;EAACrB,gBAAgB;EAACgB,WAAW;EAACF,cAAc;EAACF,iBAAiB;EAACJ;AAAgB,CAAC"},"metadata":{},"sourceType":"module"}